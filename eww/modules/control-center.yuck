; ---------------------------------------------------------------------------
;                               CONTROL-CENTER-WINDOW
; ---------------------------------------------------------------------------
(defwindow control-center
  :monitor "0"
  :namespace "control-center"
  :geometry (geometry :width "150px" :height "200px" :anchor "top right")
  (control-center)
)
; ---------------------------------------------------------------------------
;                               MAIN WIDGET
; ---------------------------------------------------------------------------
(defwidget control-center []
  (box
    :orientation "v"
    :space-evenly false
    :class "main_container"
    :spacing 10
    (box      
      :space-evenly false 
      :spacing 10
      (box
        :orientation "v"
        :space-evenly false
        :spacing 10
        (box
          :orientation "v"
          :class "block"
          :space-evenly false
          :spacing 20
          (big_btn 
            :name {wifi_info.ssid} 
            :class "btn big ${wifi_info.ssid=='off' ? 'border_red': wifi_info.ssid=='on'? 'border_yellow' : 'border_green'}"
            :style "background-image: url('images/ui/wifi.png');" 
            :text {strings.network} 
            :action_L "${EWW_CMD} ${windows_status.net_list} net_list" 
            :action_R "./scripts/wifi toggle")
          (big_btn 
            :name {bluetooth_state} 
            :class "btn big ${bluetooth_state=='off' ? 'border_red': bluetooth_state=='on'? 'border_yellow' : 'border_green'}"
            :style "background-image: url('images/ui/bluetooth.png');" 
            :text "Bluetooth" 
            :action_L "./scripts/bluetooth toggle")
        )
        (box
          :class "block"
          :spacing 10
          :space-evenly false
          (small_btn 
            :class "btn small ${sound_info.sound_status=='no' ? 'border_red':'border_green'}"
            :style "background-image: url('images/ui/volume.png');" 
            :action_L "./scripts/sound sound_toggle" 
            :action_R "pavucontrol &"
          )
          (small_btn 
            :class "btn small ${sound_info.mic_status=='no' ? 'border_red':'border_green'}"
            :style "background-image: url('images/ui/mic.png');" 
            :action_L "./scripts/sound mic_toggle" 
            :action_R "pavucontrol &"
          )
          (small_btn 
            :class "btn small"
            :style "background-image: url('images/ui/background.png');" 
            :action_L "${EWW_CMD} ${windows_status.chg_bg} chg_bg"
          )
          (small_btn 
            :class "btn small"
            :style "background-image: url('images/ui/screenshot_d.png');" 
            :action_L "${EWW_CMD} ${windows_status.screenshot} screenshot"
          )
        )
      )
      (box
        :orientation "h"
        :space-evenly false
        :class "block"
        (slider :level {brightness} :max_level {vars_info.max_brightness} :action "brightnessctl set {}" :style "background-image: url('images/ui/brigtness.png');")
        (slider :level {sound_info.sound_volume} :action "pamixer --set-volume {}" :style "background-image: url('images/ui/volume.png');")
      )
    )
    (weather :visible "${weather_json!= '[]' && weather_json[0].icon != 'null' ? true : false}")
    (player :available {track_info.available} :style {track_info.style})
    (graphs :sensor {vars_info.sensor} :visible {graph_visible})
    (monitor :sensor {vars_info.sensor})
  )
)
; ---------------------------------------------------------------------------
;                               BUTTON WIDGETS
; ---------------------------------------------------------------------------
(defwidget big_btn[?name style text ?action_L ?action_R ?class]
  (eventbox 
    :class "big_block" 
    :onclick action_L
    :onrightclick action_R
    :space-evenly false
    (box 
      :space-evenly false
      :spacing 20
      (box
        :class class
        :style style
      )
      (box
        :orientation "v"
        :space-evenly false
        :valign "center"
        (label  :text text :class "block_name" :halign "start")
        (label  
          :text "${name == 'on' ? '${strings.unblocked}' :
                  name == 'off' ? '${strings.blocked}' : name}" 
          :class "block_label" 
          :halign "start")
      )
    )
  )
)
(defwidget small_btn[style action_L ?action_R ?class]
  (eventbox 
    :class  "small_block" 
    :onclick action_L
    :onrightclick action_R
    :halign "start"
    (box
      :class class
      :style style
    )
  )
)
; ---------------------------------------------------------------------------
;                               SLIDER WIDGET
; ---------------------------------------------------------------------------
(defwidget slider [level ?max_level ?action style]
  (box
    :space-evenly false
    :orientation "v"
    (scale
      :flipped true
      :orientation "v"
      :height 160
      :class "slider_scale"
      :value level
      :draw-value false
      :min 0
      :max max_level
      :onchange action
    )
    (box
      :class "btn flat"
      :style style
    )
  )
)
; ---------------------------------------------------------------------------
;                               PLAYER WIDGET
; ---------------------------------------------------------------------------
(defwidget player [available style]
  (box
    :class "block"
    :visible "${available =='off' ? false : true}"
    :space-evenly false
    :spacing 20
    (box
      :class "cover"
      :width 100
      :style style
    )
    (box
      :orientation "v"
      :space-evenly false
      :valign "center"
      :width 200
      (label :class "block_text" :text "${track_info.available == 'on' ? substring(track_info.title, 0, 20) :'No track to play'}")
      (label :text "${track_info.artist}"  :visible "${track_info.available == 'on' ? true : false}")
      (box
        :class "btn_block"
        :spacing 10
        (eventbox :class "controls_btn" :style "background-image: url('images/ui/prev.png');" :onclick "cmus-remote -r")
        (eventbox :class "controls_btn ${track_info.status=='playing' ? 'pause' : 'play'}" :onclick "cmus-remote -u")
        (eventbox :class "controls_btn" :style "background-image: url('./images/ui/next.png');" :onclick "cmus-remote -n")
      )
    ) 
  )
)
; ---------------------------------------------------------------------------
;                               MONITOR WIDGET
; ---------------------------------------------------------------------------
(defwidget monitor [sensor]
  (box
    :class "monitor"
    :spacing 15
    (eventbox
      :class "lbl_no_active"
      :onclick "${EWW_CMD} update graph_visible=${!graph_visible}"
      (label 
        :text "${EWW_BATTERY[vars_info.battery].status == 'Charging' ? '󰂄' : '󱊣'} ${EWW_BATTERY[vars_info.battery].capacity}%" 
        :class "block_text ${
          EWW_BATTERY[vars_info.battery].capacity > 70 ? 'color_green' : 
          EWW_BATTERY[vars_info.battery].capacity > 30 ? 'color_yellow':
          EWW_BATTERY[vars_info.battery].capacity < 30 ? 'color_red' : ''}"
      )
    )
    (eventbox
      :class "${cGraph == 'RAM' && graph_visible == true ? 'lbl_btn lbl_active' : ''}"
      :height 40
      :onclick "${EWW_CMD} update cGraph='RAM'"
      (label :text "󰍛 ${round(EWW_RAM.used_mem_perc, 0)}%" :class "block_text")
    )
    (eventbox
      :class "${cGraph == 'CPU'  && graph_visible == true ? 'lbl_btn lbl_active' : ''}"
      :height 40
      :onclick "${EWW_CMD} update cGraph='CPU'"
      (label :text " ${round(EWW_CPU.avg, 0)}%" :class "block_text")
    )   
    (eventbox
      :class "${cGraph == 'TEMP'  && graph_visible == true ? 'lbl_btn lbl_active' : ''}"
      :height 40
      :onclick "${EWW_CMD} update cGraph='TEMP'"
      (label :text " ${EWW_TEMPS[sensor]}°C" :class "block_text")
    ) 
  )
)
; ---------------------------------------------------------------------------
;                               WEATHER WIDGET
; ---------------------------------------------------------------------------
(defwidget weather[visible]
  (box
    :class "block"
    :orientation "v"
    :space-evenly false
    (eventbox
      :visible {visible}
      :height 100
      :onhoverlost "${EWW_CMD} update cDay=1"
      :onscroll "./scripts/get_vars scroll {} ${cDay} ${arraylength(weather_json)}"
      (overlay
        (current_day :current {weather_json[0]})
        (current_day :current {weather_json[1]})
        (current_day :current {weather_json[2]})
        (current_day :current {weather_json[3]})
        (current_day :current {weather_json[4]})
      )
    )
    (box
      :visible {!visible}
      :space-evenly false
      :spacing 20
      (label :text " " :class "block_large_icon")
      (label :text "${strings.unavailable}" :class "block_text")
    ) 
  )
)
(defwidget current_day[current]
  (revealer :transition "crossfade" :reveal {cDay == "${current.num}" ? "true" : "false"} :duration "500ms"
    (overlay 
      (box
        :space-evenly false
        :spacing 30
        :valign "end"
        :width 320
        (box
          :orientation "v"
          :space-evenly false
          :valign "center"
          (label :text "${current.icon}" :class "block_large_icon")
          (label :text "${current.temp_max}" :class "block_large_text")
        )
        (box
          :orientation "v"
          :valign "center"
          (box
            :halign "left"
            :space-evenly false
            (label :text "${current.icon_phrase}" :halign "left" :class "block_medium_text")
          )
          (box
            :space-evenly false
            :halign "left"
            :spacing 10
            (label :text "${strings.probability}:" :class "block_medium_text")
            (label :text "${current.prec}" :class "block_medium_text")
          )
          (box
            :space-evenly false
            :halign "left"
            :spacing 10
            (label :text "${strings.wind}:" :class "value")
            (label :text "${current.wind_speed} 󱗺 ${current.wind_dir}" :class "value")
          )
        )
      )
      (label :text "${current.date}" :halign "end" :valign "start" :class "duration block_small_text")           
    )
  )      
)
; ---------------------------------------------------------------------------
;                               GRAPH WIDGET
; ---------------------------------------------------------------------------
(defwidget graphs[sensor visible]
  (box :width "360" :orientation "v" :space-evenly "false" :halign "center" :class "block" :visible visible
    (overlay
      (graph_block :name "RAM" :val "${round(EWW_RAM.used_mem_perc, 0)}" :description "%")
      (graph_block :name "CPU" :val "${round(EWW_CPU.avg, 0)}" :description "%")
      (graph_block :name "TEMP" :val "${round(EWW_TEMPS[sensor], 0)}" :description "°C")
    )
  )
)
(defwidget graph_block [name val description]
  (revealer :transition "crossfade" :reveal {cGraph == "${name}" ? "true" : "false"} :duration "500ms"
    (overlay
      (graph 
      :class "${val < 40 ? 'color_green' : val < 70 ? 'color_yellow' : 'color_red'}"
      :height 100 
      :min "0" 
      :max "100" 
      :thickness "2" 
      :value {val == "" ? 0 : val} 
      :dynamic "true" 
      :time-range "30s")
      (label :class "duration" :halign "end" :valign "end" :text "30 ${strings.sec}")
      (label :class "val ${val < 40 ? 'color_green' : val < 70 ? 'color_yellow' : 'color_red'}" :halign "start" :valign "start" :text "${val}${description}")
    )
  )
)

