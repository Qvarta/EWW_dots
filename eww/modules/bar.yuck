(defwidget bar []
  (centerbox
    :class "bar"
    (left)
    (workspaces)
    (right))
)
; ---------------------------------------------------------------------------
;                               BAR WIDGETS
; ---------------------------------------------------------------------------
(defwidget left []
  (box
    :space-evenly false
    :spacing 30
    (launcher-widget)
    (player-widget
      :available {cmus_status !='' ? true : false}
      :status {cmus_status}
      :title {track_info.title}
      :artist {track_info.artist}
    )
  )
)
(defwidget workspaces []
  (eventbox
    :cursor "pointer"
    (box :space-evenly false
      :spacing 4
      (label :text "${current_workspace}" :visible false)
      (workspaceBtn :workspace {workspaces[0]})
      (workspaceBtn :workspace {workspaces[1]})
      (workspaceBtn :workspace {workspaces[2]})
      (workspaceBtn :workspace {workspaces[3]})
      (workspaceBtn :workspace {workspaces[4]})
      (workspaceBtn :workspace {workspaces[5]})
      (workspaceBtn :workspace {workspaces[6]})
      (workspaceBtn :workspace {workspaces[7]})
    )
  )
)
(defwidget workspaceBtn[workspace]
  (eventbox
    :onhover "${workspace.windows > 0 ? './scripts/preview ${workspace.id}' : ''}" 
    (button
      :class "workspacesBox ${workspace.id == current_workspace ? 'active' : ''} ${workspace.windows > 0 ? 'inactive' : 'empty'}"
      :onclick "hyprctl dispatch workspace ${workspace.id}"
      :tooltip "${workspace.windows > 0 ? previewList : ''}"
    )
  )
)
(defwidget right []
  (box
    :halign "end"
    :space-evenly false
    :spacing 5
    (box
      :space-evenly false
      (time-widget :hour {formattime(EWW_TIME, "%k")} :minute {formattime(EWW_TIME, "%M")})
      (language-widget :layout {layout})
    )
    (box
      :space-evenly false
      (tray)
      (power_menu)
    )
  )
)
; ---------------------------------------------------------------------------
;                               LEFT WIDGETS
; ---------------------------------------------------------------------------
(defwidget launcher-widget []
  (eventbox
    :onclick "${EWW_CMD} update searchStr='' & ${EWW_CMD} open --toggle launcher"
    :tooltip "    ${strings.open}/${strings.close} ${strings.launcher}   "
    
    :cursor "pointer"
    :tooltip "    ${strings.open}/${strings.close} ${strings.app}   "
    (label :class "bar_icon launcher" :text "󱁍 ")
  )
)
(defwidget player-widget [available status title artist]
  (revealer
    :reveal  available
    :transition "slideright"
    :duration "350ms"
    (eventbox
      :onclick "cmus-remote -u"
      :class "player"
      :onrightclick "pkill -9 cmus"
      :onscroll "./scripts/scroll track {}"
      :cursor "pointer"
      (box
        :space-evenly false
        :class "bar_module"
        :spacing 5
        (label
          :class "boldText ${status=='Playing' ? 'playing' : ''}"
          :text "${title=='' ? ' player' : '${artist}:'}")
        (label :class "smallText" :text title)
      )
    )
  )
)
; ---------------------------------------------------------------------------
;                               RIGHT WIDGETS
; ---------------------------------------------------------------------------
(defwidget time-widget [hour minute]
  (box
    :class "bar_module left"
    :tooltip "    ${strings.open}/${strings.close} ${strings.calendar}    "
    (eventbox
      :onclick "${EWW_CMD} open --toggle calendar"
      :halign "start"
      :cursor "pointer"
      (label :text "${hour}:${minute}" :class "boldText")
    )
  )
)
(defwidget language-widget [layout]
  (eventbox
    :cursor "pointer"
    :onclick "./scripts/kb_layout swkb"
    (box
      :class "bar_module right"
      (label :text "󰌌 ${layout}" :class "boldText")
    )
  )
)
(defwidget tray[]
  (eventbox
    :cursor "pointer"
    :timeout 50
    :onclick "${EWW_CMD} open --toggle control_center & ${EWW_CMD} update cDay=0"
    :tooltip "    ${strings.open}/${strings.close} ${strings.controls}   "
    (box
      :space-evenly false
      :class "bar_module left"
      (tray_widget
        :text "${EWW_BATTERY[vars_info.battery].capacity < 10 ? " 󰁺" :
        EWW_BATTERY[vars_info.battery].capacity< 20 ? " 󰁼" :
        EWW_BATTERY[vars_info.battery].capacity < 40 ? " 󰁼" :
        EWW_BATTERY[vars_info.battery].capacity < 60 ? " 󰁿" :
        EWW_BATTERY[vars_info.battery].capacity < 80 ? " 󰂁" :
        EWW_BATTERY[vars_info.battery].capacity < 100 ? " 󰁹" : " 󰂄"}"
        :visible  true
      )
      (tray_widget :text {wifi_info.icon} :visible  true)
      (tray_widget :text "" :visible "${bluetooth_state != 'off' ? true : false}")
      (tray_widget :text "${sound_info.mic_status == 'yes' ? ' ' : ' '}" :visible "${sound_info.mic_status == 'yes' ? true : false}")
      (tray_widget
        :text "${sound_info.sound_status == 'no' ? '' :
        sound_info.sound_volume < 51  ? '󰕾' :
        sound_info.sound_volume < 101 ? '' : ''}"
        :visible  true
      )
    )
  )
)
(defwidget power_menu []
  (eventbox
    :onclick "${EWW_CMD} update power_rev=${!power_rev}"
    :tooltip "    ${strings.open}/${strings.close} ${strings.menu} ${strings.power}  "
    (box
      :class "bar_module right"
      :space-evenly false
      (label :class "bar_icon red" :text "${power_rev == 'false' ? ' ' : '󰅙  '}")
      (revealer
        :transition "slideright"
        :reveal power_rev
        :duration "750ms"
        (box
          :halign "end"
          :spacing 10
          (eventbox
            :onclick "${EWW_CMD} open power --arg power_info='${strings.logoff}' --arg power_command='hyprctl dispatch exit 0'"
            :tooltip " ${strings.logoff} "
            (label :class "bar_icon" :text "󰿅")
          )
          (eventbox
            :onclick "${EWW_CMD} open power --arg power_info='${strings.reboot}' --arg power_command='systemctl reboot'"
            :tooltip "  ${strings.reboot}  "
            (label :class "bar_icon" :text "")
          )
          (eventbox
            :onclick "${EWW_CMD} open power --arg power_info='${strings.poweroff}' --arg power_command='systemctl poweroff'"
            :tooltip "  ${strings.poweroff} "
            (label :class "bar_icon" :text "󰤆")
          )
        )
      ))
  )
  
)
; ---------------------------------------------------------------------------
;                               TRAY WIDGET
; ---------------------------------------------------------------------------
(defwidget tray_widget[text visible]
  (box
    :visible visible
    (label :class "bar_icon" :text text)
  )
)


