; ---------------------------------------------------------------------------
;                               CONTROLS WIDGET
; ---------------------------------------------------------------------------
(defwidget controls[]
  (stack
    :selected numButtons
    :transition "${numButtons == 0 ? 'slideleft' : 'slideright'}"
    :class "controls"
    :same-size false
      (box
        :space-evenly false
        :orientation "v"
        (quickButtons)
        (sliders)
      )
      (net_list)
      (scroll_devices)
  )

)
(defwidget quickButtons[]
  (box
    :spacing 10
    :class "QuickBtns"
    (quickBtn
      :name "wifi"
      :state {wifi_info.ssid}
      :icon "  "
      :action1 "./scripts/wifi/wifiInfo toggle"
      :action2 "${EWW_CMD} update numButtons=1"
    )
    (quickBtn
      :name "bt"
      :state {bluetooth_state}
      :icon "󰂯 "
      :action1 "./scripts/bluetooth toggle"
      :action2 "${EWW_CMD} update numButtons=2"
    )
  )
)
(defwidget quickBtn[name state icon action1 action2]
  (box
    :class "quickBtn"
    :space-evenly false
    (eventbox
      :class "btnLeft"
      :hexpand true
      :onclick action1
      (box
        :hexpand true
        :space-evenly false
        (label  :class "btnIcon" :text icon)
        (label
          :class "btnText"
          :hexpand true
          :halign "start"
          :text "${state == 'on' ? '${strings.unblocked}' : state == 'off' ? '${strings.blocked}' : substring(state, 0, 8)}"
        )
      )
    )
    (eventbox
      ; :onclick "${EWW_CMD} update currentBtn=${name} & ./scripts/open_popup popup"
      :onclick "${state != 'off' ? action2 : ''}"
      :class "btnRight ${state != 'off' ? 'dark' : 'off'}"
      :cursor "pointer"
      (label :class "iconArrow" :text "")
    )
  )
)