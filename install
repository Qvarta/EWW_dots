#!/bin/bash

# Define the software that would be installed 
#Need some prep work
prep_stage=(  
    kitty
    qt5-wayland 
    qt5ct
    qt6-wayland 
    qt6ct
    qt5-svg
    qt5-quickcontrols2 # for sddm themes
    qt5-graphicaleffects # for sddm themes
    gtk3 
    xdg-desktop-portal-hyprland  
    polkit-gnome # for pamac
    lxappearance # for assistant
    pipewire 
    wireplumber 
    jq 
    socat
    bc
    wl-clipboard 
    cliphist 
    pacman-contrib
    pamac-aur
    pamixer 
    pavucontrol 
    alsa-utils
    brightnessctl 
    bluez 
    bluez-utils 
    bluez-tools  
    python-pillow #for ranger img preview   
)

#the main packages
install_stage=(
	nemo
	file-roller
    eww-git
    mako 
    swww 
    swaylock-effects 
    rofi 
    wlogout 
    hyprshot
    slurp
    cmus
    cava-git
    mpv
    gvfs 
    ranger
    starship
    neofetch
    swappy
    pinta
    vscodium-bin
    brave-nightly-bin
    ttf-iosevka-nerd
    noto-fonts-emoji 
)

for str in ${myArray[@]}; do
  echo $str
done

# set some colors
CNT="[\e[1;36mNOTE\e[0m]"
COK="[\e[1;32mOK\e[0m]"
CER="[\e[1;31mERROR\e[0m]"
CAT="[\e[1;37mATTENTION\e[0m]"
CWR="[\e[1;35mWARNING\e[0m]"
CAC="[\e[1;33mACTION\e[0m]"
INSTLOG="install.log"

######
# functions go here

# function that would show a progress bar to the user
show_progress() {
    while ps | grep $1 &> /dev/null;
    do
        echo -n "."
        sleep 2
    done
    echo -en "Done!\n"
    sleep 2
}

# function that will test for a package and if not found it will attempt to install it
install_software() {
    # First lets see if the package is there
    if yay -Q $1 &>> /dev/null ; then
        echo -e "$COK - $1 is already installed."
    else
        # no package found so installing
        echo -en "$CNT - Now installing $1 ."
        yay -S --noconfirm $1 &>> $INSTLOG &
        show_progress $!
        # test to make sure package installed
        if yay -Q $1 &>> /dev/null ; then
            echo -e "\e[1A\e[K$COK - $1 was installed."
        else
            # if this is hit then a package is missing, exit to review log
            echo -e "\e[1A\e[K$CER - $1 install had failed, please check the install.log"
            exit
        fi
    fi
}

# clear the screen
clear


# let the user know that we will use sudo
echo -e "$CNT - This script will run some commands that require sudo. You will be prompted to enter your password.
If you are worried about entering your password then you may want to review the content of the script."
sleep 1

# give the user an option to exit out
read -rep $'[\e[1;33mACTION\e[0m] - Would you like to continue with the install (y,n) ' CONTINST
if [[ $CONTINST == "Y" || $CONTINST == "y" ]]; then
    echo -e "$CNT - Setup starting..."
    sudo touch /tmp/hyprv.tmp
else
    echo -e "$CNT - This script will now exit, no changes were made to your system."
    exit
fi

#### Check for package manager ####
if [ ! -f /sbin/yay ]; then  
    echo -en "$CNT - Configuering yay."
    git clone https://aur.archlinux.org/yay.git &>> $INSTLOG
    cd yay
    makepkg -si --noconfirm &>> ../$INSTLOG &
    show_progress $!
    if [ -f /sbin/yay ]; then
        echo -e "\e[1A\e[K$COK - yay configured"
        cd ..
        
        # update the yay database
        echo -en "$CNT - Updating yay."
        yay -Suy --noconfirm &>> $INSTLOG &
        show_progress $!
        echo -e "\e[1A\e[K$COK - yay updated."
    else
        # if this is hit then a package is missing, exit to review log
        echo -e "\e[1A\e[K$CER - yay install failed, please check the install.log"
        exit
    fi
fi

### Fetch the signing keys  ####
echo -e "$CNT - Fetch the signing keys from GitHub and import them before building EWW."
sleep 1
curl -sS https://github.com/elkowar.gpg | gpg --import -q - &>> $INSTLOG
curl -sS https://github.com/web-flow.gpg | gpg --import -q - &>> $INSTLOG

### Install all of the above pacakges ####
read -rep $'[\e[1;33mACTION\e[0m] - Would you like to install the packages? (y,n) ' INST
if [[ $INST == "Y" || $INST == "y" ]]; then

    # Prep Stage - Bunch of needed items
    echo -e "$CNT - Prep Stage - Installing needed components, this may take a while..."
    for SOFTWR in ${prep_stage[@]}; do
        install_software $SOFTWR 
    done

    # Stage 1 - main components
    echo -e "$CNT - Installing main components, this may take a while..."
    for SOFTWR in ${install_stage[@]}; do
        install_software $SOFTWR 
    done

    # Start the bluetooth service
    echo -e "$CNT - Starting the Bluetooth Service..."
    sudo systemctl enable --now bluetooth.service &>> $INSTLOG
    sleep 2
    
    # Clean out other portals
    echo -e "$CNT - Cleaning out conflicting xdg portals..."
    yay -R --noconfirm xdg-desktop-portal-gnome xdg-desktop-portal-gtk &>> $INSTLOG
fi


### Copy Config Files ###
read -rep $'[\e[1;33mACTION\e[0m] - Would you like to copy config files? (y,n) ' CFG
if [[ $CFG == "Y" || $CFG == "y" ]]; then
    echo -e "$CNT - Copying config files..."
    # Setup each appliaction
    # check for existing config folders and backup 
    for DIR in hypr kitty mako swaylock wlogout rofi eww ranger cava
    do 
        DIRPATH=~/.config/$DIR
        if [ -d "$DIRPATH" ]; then 
            echo -e "$CAT - Config for $DIR located, backing up."
            mv $DIRPATH $DIRPATH-back &>> $INSTLOG
            echo -e "$COK - Backed up $DIR to $DIRPATH-back."
        fi

        # make new empty folders
        mkdir -p $DIRPATH &>> $INSTLOG
        cp -r $DIR/* $DIRPATH &>> $INSTLOG
    done
fi
### Make scripts executable ###
echo -e "$CNT - Making scripts executable..."
chmod +x ~/.config/eww/scripts/*

### Install the starship shell ###
read -rep $'[\e[1;33mACTION\e[0m] - Would you like to activate the starship shell? (y,n) ' STAR
if [[ $STAR == "Y" || $STAR == "y" ]]; then
    # install the starship shell
    echo -e "$CNT - Hansen Crusher, Engage!"
    echo -e "$CNT - Updating .bashrc..."
    echo -e '\neval "$(starship init bash)"' >> ~/.bashrc
    echo -e "$CNT - copying starship config file to ~/.config ..."
    cp starship.toml ~/.config/
fi

### Install the SDDM theme ### 
read -rep $'[\e[1;33mACTION\e[0m] - Would you like to install the SDDM theme? (y,n) ' SDDM
    if [[ $SDDM == "Y" || $SDDM == "y" ]]; then
        echo -e "$CNT - Setting up the login screen."
        sudo cp -R sddm/gruvbox-sddm /usr/share/sddm/themes/
        sudo chown -R $USER:$USER /usr/share/sddm/themes/
        if [ ! -d /etc/sddm.conf.d ]; then
            sudo mkdir /etc/sddm.conf.d
        fi
        echo -e "[Theme]\nCurrent=gruvbox-sddm" | sudo tee -a /etc/sddm.conf.d/10-theme.conf &>> $INSTLOG
    fi

### Install GTK theme ###
read -rep $'[\e[1;33mACTION\e[0m] - Would you like to install the GTK theme? (y,n) ' THEME
if [[ $THEME == "Y" || $THEME == "y" ]]; then
    echo -e "$CNT - Copy GTK theme..."
    cp -r .themes $HOME &>> $INSTLOG
    echo -e "$CNT - Install the GTK theme..."
    gsettings set org.gnome.desktop.interface gtk-theme "ChromeOS-Dark-Slate-Rounded"
    echo -e "$CNT - Copy icon theme..."
    cp -r .icons $HOME &>> $INSTLOG
    echo -e "$CNT - Install the icon theme..."
    gsettings set org.gnome.desktop.interface icon-theme 'Gruvbox'
fi
### Script is done ###
echo -e "$CNT - Script had completed!"

read -rep $'[\e[1;33mACTION\e[0m] - Reboot now? (y,n) ' REB
if [[ $REB == "Y" || $REB == "y" ]]; then
    exec sudo systemctl reboot &>> $INSTLOG
else
    exit
fi



